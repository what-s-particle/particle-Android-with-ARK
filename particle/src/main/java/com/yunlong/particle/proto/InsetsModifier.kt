// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.yunlong.particle.proto.InsetsModifier in generate/particle.proto
package com.yunlong.particle.proto

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

public class InsetsModifier(
  @field:WireField(
    tag = 1,
    adapter = "com.yunlong.particle.proto.SizeModifier#ADAPTER",
  )
  public val left: SizeModifier? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.yunlong.particle.proto.SizeModifier#ADAPTER",
  )
  public val top: SizeModifier? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.yunlong.particle.proto.SizeModifier#ADAPTER",
  )
  public val right: SizeModifier? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.yunlong.particle.proto.SizeModifier#ADAPTER",
  )
  public val bottom: SizeModifier? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : AndroidMessage<InsetsModifier, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is InsetsModifier) return false
    if (unknownFields != other.unknownFields) return false
    if (left != other.left) return false
    if (top != other.top) return false
    if (right != other.right) return false
    if (bottom != other.bottom) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (left?.hashCode() ?: 0)
      result = result * 37 + (top?.hashCode() ?: 0)
      result = result * 37 + (right?.hashCode() ?: 0)
      result = result * 37 + (bottom?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (left != null) result += """left=$left"""
    if (top != null) result += """top=$top"""
    if (right != null) result += """right=$right"""
    if (bottom != null) result += """bottom=$bottom"""
    return result.joinToString(prefix = "InsetsModifier{", separator = ", ", postfix = "}")
  }

  public fun copy(
    left: SizeModifier? = this.left,
    top: SizeModifier? = this.top,
    right: SizeModifier? = this.right,
    bottom: SizeModifier? = this.bottom,
    unknownFields: ByteString = this.unknownFields,
  ): InsetsModifier = InsetsModifier(left, top, right, bottom, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<InsetsModifier> = object : ProtoAdapter<InsetsModifier>(
      FieldEncoding.LENGTH_DELIMITED, 
      InsetsModifier::class, 
      "type.googleapis.com/com.yunlong.particle.proto.InsetsModifier", 
      PROTO_3, 
      null, 
      "generate/particle.proto"
    ) {
      public override fun encodedSize(`value`: InsetsModifier): Int {
        var size = value.unknownFields.size
        size += SizeModifier.ADAPTER.encodedSizeWithTag(1, value.left)
        size += SizeModifier.ADAPTER.encodedSizeWithTag(2, value.top)
        size += SizeModifier.ADAPTER.encodedSizeWithTag(3, value.right)
        size += SizeModifier.ADAPTER.encodedSizeWithTag(4, value.bottom)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: InsetsModifier): Unit {
        SizeModifier.ADAPTER.encodeWithTag(writer, 1, value.left)
        SizeModifier.ADAPTER.encodeWithTag(writer, 2, value.top)
        SizeModifier.ADAPTER.encodeWithTag(writer, 3, value.right)
        SizeModifier.ADAPTER.encodeWithTag(writer, 4, value.bottom)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: InsetsModifier): Unit {
        writer.writeBytes(value.unknownFields)
        SizeModifier.ADAPTER.encodeWithTag(writer, 4, value.bottom)
        SizeModifier.ADAPTER.encodeWithTag(writer, 3, value.right)
        SizeModifier.ADAPTER.encodeWithTag(writer, 2, value.top)
        SizeModifier.ADAPTER.encodeWithTag(writer, 1, value.left)
      }

      public override fun decode(reader: ProtoReader): InsetsModifier {
        var left: SizeModifier? = null
        var top: SizeModifier? = null
        var right: SizeModifier? = null
        var bottom: SizeModifier? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> left = SizeModifier.ADAPTER.decode(reader)
            2 -> top = SizeModifier.ADAPTER.decode(reader)
            3 -> right = SizeModifier.ADAPTER.decode(reader)
            4 -> bottom = SizeModifier.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return InsetsModifier(
          left = left,
          top = top,
          right = right,
          bottom = bottom,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: InsetsModifier): InsetsModifier = value.copy(
        left = value.left?.let(SizeModifier.ADAPTER::redact),
        top = value.top?.let(SizeModifier.ADAPTER::redact),
        right = value.right?.let(SizeModifier.ADAPTER::redact),
        bottom = value.bottom?.let(SizeModifier.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<InsetsModifier> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
