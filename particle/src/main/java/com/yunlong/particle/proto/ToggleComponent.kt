// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.yunlong.particle.proto.ToggleComponent in generate/particle.proto
package com.yunlong.particle.proto

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * Toggle Element used to create a toggle switch
 */
public class ToggleComponent(
  /**
   * The text label for the toggle switch.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val label: String = "",
  /**
   * Whether the toggle switch is currently in the "on" or "off" position.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val isChecked: Boolean = false,
  unknownFields: ByteString = ByteString.EMPTY,
) : AndroidMessage<ToggleComponent, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ToggleComponent) return false
    if (unknownFields != other.unknownFields) return false
    if (label != other.label) return false
    if (isChecked != other.isChecked) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + label.hashCode()
      result = result * 37 + isChecked.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """label=${sanitize(label)}"""
    result += """isChecked=$isChecked"""
    return result.joinToString(prefix = "ToggleComponent{", separator = ", ", postfix = "}")
  }

  public fun copy(
    label: String = this.label,
    isChecked: Boolean = this.isChecked,
    unknownFields: ByteString = this.unknownFields,
  ): ToggleComponent = ToggleComponent(label, isChecked, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ToggleComponent> = object : ProtoAdapter<ToggleComponent>(
      FieldEncoding.LENGTH_DELIMITED, 
      ToggleComponent::class, 
      "type.googleapis.com/com.yunlong.particle.proto.ToggleComponent", 
      PROTO_3, 
      null, 
      "generate/particle.proto"
    ) {
      public override fun encodedSize(`value`: ToggleComponent): Int {
        var size = value.unknownFields.size
        if (value.label != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.label)
        if (value.isChecked != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(2,
            value.isChecked)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: ToggleComponent): Unit {
        if (value.label != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.label)
        if (value.isChecked != false) ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.isChecked)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: ToggleComponent): Unit {
        writer.writeBytes(value.unknownFields)
        if (value.isChecked != false) ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.isChecked)
        if (value.label != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.label)
      }

      public override fun decode(reader: ProtoReader): ToggleComponent {
        var label: String = ""
        var isChecked: Boolean = false
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> label = ProtoAdapter.STRING.decode(reader)
            2 -> isChecked = ProtoAdapter.BOOL.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ToggleComponent(
          label = label,
          isChecked = isChecked,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: ToggleComponent): ToggleComponent = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<ToggleComponent> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
