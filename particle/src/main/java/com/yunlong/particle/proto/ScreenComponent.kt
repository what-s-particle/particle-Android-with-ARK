// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.yunlong.particle.proto.ScreenComponent in generate/particle.proto
package com.yunlong.particle.proto

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * Screen is inspired by Android's Scaffold and Navigation. This component contains the raw
 * materials needed to build a visual app screen.
 */
public class ScreenComponent(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val route: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
  )
  public val from: String? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.yunlong.particle.proto.Particle#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val content: Particle? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.yunlong.particle.proto.Particle#ADAPTER",
  )
  public val bottomBar: Particle? = null,
  @field:WireField(
    tag = 5,
    adapter = "com.yunlong.particle.proto.Particle#ADAPTER",
  )
  public val topBar: Particle? = null,
  @field:WireField(
    tag = 6,
    adapter = "com.yunlong.particle.proto.Particle#ADAPTER",
  )
  public val modalDrawer: Particle? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : AndroidMessage<ScreenComponent, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ScreenComponent) return false
    if (unknownFields != other.unknownFields) return false
    if (route != other.route) return false
    if (from != other.from) return false
    if (content != other.content) return false
    if (bottomBar != other.bottomBar) return false
    if (topBar != other.topBar) return false
    if (modalDrawer != other.modalDrawer) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + route.hashCode()
      result = result * 37 + (from?.hashCode() ?: 0)
      result = result * 37 + (content?.hashCode() ?: 0)
      result = result * 37 + (bottomBar?.hashCode() ?: 0)
      result = result * 37 + (topBar?.hashCode() ?: 0)
      result = result * 37 + (modalDrawer?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """route=${sanitize(route)}"""
    if (from != null) result += """from=${sanitize(from)}"""
    if (content != null) result += """content=$content"""
    if (bottomBar != null) result += """bottomBar=$bottomBar"""
    if (topBar != null) result += """topBar=$topBar"""
    if (modalDrawer != null) result += """modalDrawer=$modalDrawer"""
    return result.joinToString(prefix = "ScreenComponent{", separator = ", ", postfix = "}")
  }

  public fun copy(
    route: String = this.route,
    from: String? = this.from,
    content: Particle? = this.content,
    bottomBar: Particle? = this.bottomBar,
    topBar: Particle? = this.topBar,
    modalDrawer: Particle? = this.modalDrawer,
    unknownFields: ByteString = this.unknownFields,
  ): ScreenComponent = ScreenComponent(route, from, content, bottomBar, topBar, modalDrawer,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ScreenComponent> = object : ProtoAdapter<ScreenComponent>(
      FieldEncoding.LENGTH_DELIMITED, 
      ScreenComponent::class, 
      "type.googleapis.com/com.yunlong.particle.proto.ScreenComponent", 
      PROTO_3, 
      null, 
      "generate/particle.proto"
    ) {
      public override fun encodedSize(`value`: ScreenComponent): Int {
        var size = value.unknownFields.size
        if (value.route != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.route)
        size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.from)
        if (value.content != null) size += Particle.ADAPTER.encodedSizeWithTag(3, value.content)
        size += Particle.ADAPTER.encodedSizeWithTag(4, value.bottomBar)
        size += Particle.ADAPTER.encodedSizeWithTag(5, value.topBar)
        size += Particle.ADAPTER.encodedSizeWithTag(6, value.modalDrawer)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: ScreenComponent): Unit {
        if (value.route != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.route)
        ProtoAdapter.STRING.encodeWithTag(writer, 2, value.from)
        if (value.content != null) Particle.ADAPTER.encodeWithTag(writer, 3, value.content)
        Particle.ADAPTER.encodeWithTag(writer, 4, value.bottomBar)
        Particle.ADAPTER.encodeWithTag(writer, 5, value.topBar)
        Particle.ADAPTER.encodeWithTag(writer, 6, value.modalDrawer)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: ScreenComponent): Unit {
        writer.writeBytes(value.unknownFields)
        Particle.ADAPTER.encodeWithTag(writer, 6, value.modalDrawer)
        Particle.ADAPTER.encodeWithTag(writer, 5, value.topBar)
        Particle.ADAPTER.encodeWithTag(writer, 4, value.bottomBar)
        if (value.content != null) Particle.ADAPTER.encodeWithTag(writer, 3, value.content)
        ProtoAdapter.STRING.encodeWithTag(writer, 2, value.from)
        if (value.route != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.route)
      }

      public override fun decode(reader: ProtoReader): ScreenComponent {
        var route: String = ""
        var from: String? = null
        var content: Particle? = null
        var bottomBar: Particle? = null
        var topBar: Particle? = null
        var modalDrawer: Particle? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> route = ProtoAdapter.STRING.decode(reader)
            2 -> from = ProtoAdapter.STRING.decode(reader)
            3 -> content = Particle.ADAPTER.decode(reader)
            4 -> bottomBar = Particle.ADAPTER.decode(reader)
            5 -> topBar = Particle.ADAPTER.decode(reader)
            6 -> modalDrawer = Particle.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ScreenComponent(
          route = route,
          from = from,
          content = content,
          bottomBar = bottomBar,
          topBar = topBar,
          modalDrawer = modalDrawer,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: ScreenComponent): ScreenComponent = value.copy(
        content = value.content?.let(Particle.ADAPTER::redact),
        bottomBar = value.bottomBar?.let(Particle.ADAPTER::redact),
        topBar = value.topBar?.let(Particle.ADAPTER::redact),
        modalDrawer = value.modalDrawer?.let(Particle.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<ScreenComponent> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
