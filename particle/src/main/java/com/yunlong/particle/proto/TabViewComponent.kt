// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.yunlong.particle.proto.TabViewComponent in generate/particle.proto
package com.yunlong.particle.proto

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * Tab view layout component.
 */
public class TabViewComponent(
  tabs: List<Particle> = emptyList(),
  /**
   * whether this tab is selected or not
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val selected: Boolean = false,
  /**
   * controls the enabled state of this tab. When false, this component will not respond to user
   * input,
   * and it will appear visually disabled and disabled to accessibility services.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val enabled: Boolean = false,
  /**
   * the color for the content of this tab when selected, and the color of the ripple.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.yunlong.particle.proto.ColorModifier#ADAPTER",
  )
  public val selectedColor: ColorModifier? = null,
  /**
   * the color for the content of this tab when not selected
   */
  @field:WireField(
    tag = 5,
    adapter = "com.yunlong.particle.proto.ColorModifier#ADAPTER",
  )
  public val unselectedColor: ColorModifier? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : AndroidMessage<TabViewComponent, Nothing>(ADAPTER, unknownFields) {
  /**
   * Child tabs in the component.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.yunlong.particle.proto.Particle#ADAPTER",
    label = WireField.Label.REPEATED,
  )
  public val tabs: List<Particle> = immutableCopyOf("tabs", tabs)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is TabViewComponent) return false
    if (unknownFields != other.unknownFields) return false
    if (tabs != other.tabs) return false
    if (selected != other.selected) return false
    if (enabled != other.enabled) return false
    if (selectedColor != other.selectedColor) return false
    if (unselectedColor != other.unselectedColor) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + tabs.hashCode()
      result = result * 37 + selected.hashCode()
      result = result * 37 + enabled.hashCode()
      result = result * 37 + (selectedColor?.hashCode() ?: 0)
      result = result * 37 + (unselectedColor?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (tabs.isNotEmpty()) result += """tabs=$tabs"""
    result += """selected=$selected"""
    result += """enabled=$enabled"""
    if (selectedColor != null) result += """selectedColor=$selectedColor"""
    if (unselectedColor != null) result += """unselectedColor=$unselectedColor"""
    return result.joinToString(prefix = "TabViewComponent{", separator = ", ", postfix = "}")
  }

  public fun copy(
    tabs: List<Particle> = this.tabs,
    selected: Boolean = this.selected,
    enabled: Boolean = this.enabled,
    selectedColor: ColorModifier? = this.selectedColor,
    unselectedColor: ColorModifier? = this.unselectedColor,
    unknownFields: ByteString = this.unknownFields,
  ): TabViewComponent = TabViewComponent(tabs, selected, enabled, selectedColor, unselectedColor,
      unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<TabViewComponent> = object : ProtoAdapter<TabViewComponent>(
      FieldEncoding.LENGTH_DELIMITED, 
      TabViewComponent::class, 
      "type.googleapis.com/com.yunlong.particle.proto.TabViewComponent", 
      PROTO_3, 
      null, 
      "generate/particle.proto"
    ) {
      public override fun encodedSize(`value`: TabViewComponent): Int {
        var size = value.unknownFields.size
        size += Particle.ADAPTER.asRepeated().encodedSizeWithTag(1, value.tabs)
        if (value.selected != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(2, value.selected)
        if (value.enabled != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(3, value.enabled)
        size += ColorModifier.ADAPTER.encodedSizeWithTag(4, value.selectedColor)
        size += ColorModifier.ADAPTER.encodedSizeWithTag(5, value.unselectedColor)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: TabViewComponent): Unit {
        Particle.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.tabs)
        if (value.selected != false) ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.selected)
        if (value.enabled != false) ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.enabled)
        ColorModifier.ADAPTER.encodeWithTag(writer, 4, value.selectedColor)
        ColorModifier.ADAPTER.encodeWithTag(writer, 5, value.unselectedColor)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: TabViewComponent): Unit {
        writer.writeBytes(value.unknownFields)
        ColorModifier.ADAPTER.encodeWithTag(writer, 5, value.unselectedColor)
        ColorModifier.ADAPTER.encodeWithTag(writer, 4, value.selectedColor)
        if (value.enabled != false) ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.enabled)
        if (value.selected != false) ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.selected)
        Particle.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.tabs)
      }

      public override fun decode(reader: ProtoReader): TabViewComponent {
        val tabs = mutableListOf<Particle>()
        var selected: Boolean = false
        var enabled: Boolean = false
        var selectedColor: ColorModifier? = null
        var unselectedColor: ColorModifier? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> tabs.add(Particle.ADAPTER.decode(reader))
            2 -> selected = ProtoAdapter.BOOL.decode(reader)
            3 -> enabled = ProtoAdapter.BOOL.decode(reader)
            4 -> selectedColor = ColorModifier.ADAPTER.decode(reader)
            5 -> unselectedColor = ColorModifier.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return TabViewComponent(
          tabs = tabs,
          selected = selected,
          enabled = enabled,
          selectedColor = selectedColor,
          unselectedColor = unselectedColor,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: TabViewComponent): TabViewComponent = value.copy(
        tabs = value.tabs.redactElements(Particle.ADAPTER),
        selectedColor = value.selectedColor?.let(ColorModifier.ADAPTER::redact),
        unselectedColor = value.unselectedColor?.let(ColorModifier.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<TabViewComponent> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
