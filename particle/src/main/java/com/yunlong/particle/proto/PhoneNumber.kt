// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.yunlong.particle.proto.PhoneNumber in generate/particle.proto
package com.yunlong.particle.proto

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

public class PhoneNumber(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val number: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.yunlong.particle.proto.PhoneType#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val type: PhoneType = PhoneType.MOBILE,
  unknownFields: ByteString = ByteString.EMPTY,
) : AndroidMessage<PhoneNumber, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is PhoneNumber) return false
    if (unknownFields != other.unknownFields) return false
    if (number != other.number) return false
    if (type != other.type) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + number.hashCode()
      result = result * 37 + type.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """number=${sanitize(number)}"""
    result += """type=$type"""
    return result.joinToString(prefix = "PhoneNumber{", separator = ", ", postfix = "}")
  }

  public fun copy(
    number: String = this.number,
    type: PhoneType = this.type,
    unknownFields: ByteString = this.unknownFields,
  ): PhoneNumber = PhoneNumber(number, type, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<PhoneNumber> = object : ProtoAdapter<PhoneNumber>(
      FieldEncoding.LENGTH_DELIMITED, 
      PhoneNumber::class, 
      "type.googleapis.com/com.yunlong.particle.proto.PhoneNumber", 
      PROTO_3, 
      null, 
      "generate/particle.proto"
    ) {
      public override fun encodedSize(`value`: PhoneNumber): Int {
        var size = value.unknownFields.size
        if (value.number != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.number)
        if (value.type != PhoneType.MOBILE) size += PhoneType.ADAPTER.encodedSizeWithTag(2,
            value.type)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: PhoneNumber): Unit {
        if (value.number != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.number)
        if (value.type != PhoneType.MOBILE) PhoneType.ADAPTER.encodeWithTag(writer, 2, value.type)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: PhoneNumber): Unit {
        writer.writeBytes(value.unknownFields)
        if (value.type != PhoneType.MOBILE) PhoneType.ADAPTER.encodeWithTag(writer, 2, value.type)
        if (value.number != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.number)
      }

      public override fun decode(reader: ProtoReader): PhoneNumber {
        var number: String = ""
        var type: PhoneType = PhoneType.MOBILE
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> number = ProtoAdapter.STRING.decode(reader)
            2 -> try {
              type = PhoneType.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return PhoneNumber(
          number = number,
          type = type,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: PhoneNumber): PhoneNumber = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<PhoneNumber> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
