// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.yunlong.particle.proto.SendHttpRequestAction in generate/particle.proto
package com.yunlong.particle.proto

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.jvm.JvmField
import kotlin.lazy
import okio.ByteString

/**
 * Action to send an HTTP request
 */
public class SendHttpRequestAction(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val endpoint: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.yunlong.particle.proto.RequestType#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val type: RequestType = RequestType.GET,
  body: Map<String, String> = emptyMap(),
  success_actions: List<Action> = emptyList(),
  failure_actions: List<Action> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : AndroidMessage<SendHttpRequestAction, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 3,
    keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
  )
  public val body: Map<String, String> = immutableCopyOf("body", body)

  @field:WireField(
    tag = 4,
    adapter = "com.yunlong.particle.proto.Action#ADAPTER",
    label = WireField.Label.REPEATED,
    jsonName = "successActions",
  )
  public val success_actions: List<Action> = immutableCopyOf("success_actions", success_actions)

  @field:WireField(
    tag = 5,
    adapter = "com.yunlong.particle.proto.Action#ADAPTER",
    label = WireField.Label.REPEATED,
    jsonName = "failureActions",
  )
  public val failure_actions: List<Action> = immutableCopyOf("failure_actions", failure_actions)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is SendHttpRequestAction) return false
    if (unknownFields != other.unknownFields) return false
    if (endpoint != other.endpoint) return false
    if (type != other.type) return false
    if (body != other.body) return false
    if (success_actions != other.success_actions) return false
    if (failure_actions != other.failure_actions) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + endpoint.hashCode()
      result = result * 37 + type.hashCode()
      result = result * 37 + body.hashCode()
      result = result * 37 + success_actions.hashCode()
      result = result * 37 + failure_actions.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """endpoint=${sanitize(endpoint)}"""
    result += """type=$type"""
    if (body.isNotEmpty()) result += """body=$body"""
    if (success_actions.isNotEmpty()) result += """success_actions=$success_actions"""
    if (failure_actions.isNotEmpty()) result += """failure_actions=$failure_actions"""
    return result.joinToString(prefix = "SendHttpRequestAction{", separator = ", ", postfix = "}")
  }

  public fun copy(
    endpoint: String = this.endpoint,
    type: RequestType = this.type,
    body: Map<String, String> = this.body,
    success_actions: List<Action> = this.success_actions,
    failure_actions: List<Action> = this.failure_actions,
    unknownFields: ByteString = this.unknownFields,
  ): SendHttpRequestAction = SendHttpRequestAction(endpoint, type, body, success_actions,
      failure_actions, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<SendHttpRequestAction> = object :
        ProtoAdapter<SendHttpRequestAction>(
      FieldEncoding.LENGTH_DELIMITED, 
      SendHttpRequestAction::class, 
      "type.googleapis.com/com.yunlong.particle.proto.SendHttpRequestAction", 
      PROTO_3, 
      null, 
      "generate/particle.proto"
    ) {
      private val bodyAdapter: ProtoAdapter<Map<String, String>> by lazy {
          ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING) }

      public override fun encodedSize(`value`: SendHttpRequestAction): Int {
        var size = value.unknownFields.size
        if (value.endpoint != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.endpoint)
        if (value.type != RequestType.GET) size += RequestType.ADAPTER.encodedSizeWithTag(2,
            value.type)
        size += bodyAdapter.encodedSizeWithTag(3, value.body)
        size += Action.ADAPTER.asRepeated().encodedSizeWithTag(4, value.success_actions)
        size += Action.ADAPTER.asRepeated().encodedSizeWithTag(5, value.failure_actions)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: SendHttpRequestAction): Unit {
        if (value.endpoint != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.endpoint)
        if (value.type != RequestType.GET) RequestType.ADAPTER.encodeWithTag(writer, 2, value.type)
        bodyAdapter.encodeWithTag(writer, 3, value.body)
        Action.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.success_actions)
        Action.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.failure_actions)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: SendHttpRequestAction): Unit {
        writer.writeBytes(value.unknownFields)
        Action.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.failure_actions)
        Action.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.success_actions)
        bodyAdapter.encodeWithTag(writer, 3, value.body)
        if (value.type != RequestType.GET) RequestType.ADAPTER.encodeWithTag(writer, 2, value.type)
        if (value.endpoint != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.endpoint)
      }

      public override fun decode(reader: ProtoReader): SendHttpRequestAction {
        var endpoint: String = ""
        var type: RequestType = RequestType.GET
        val body = mutableMapOf<String, String>()
        val success_actions = mutableListOf<Action>()
        val failure_actions = mutableListOf<Action>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> endpoint = ProtoAdapter.STRING.decode(reader)
            2 -> try {
              type = RequestType.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            3 -> body.putAll(bodyAdapter.decode(reader))
            4 -> success_actions.add(Action.ADAPTER.decode(reader))
            5 -> failure_actions.add(Action.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return SendHttpRequestAction(
          endpoint = endpoint,
          type = type,
          body = body,
          success_actions = success_actions,
          failure_actions = failure_actions,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: SendHttpRequestAction): SendHttpRequestAction =
          value.copy(
        success_actions = value.success_actions.redactElements(Action.ADAPTER),
        failure_actions = value.failure_actions.redactElements(Action.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<SendHttpRequestAction> =
        AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
