// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.yunlong.particle.proto.ConditionAction in generate/particle.proto
package com.yunlong.particle.proto

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * Action of if else
 */
public class ConditionAction(
  @field:WireField(
    tag = 1,
    adapter = "com.yunlong.particle.proto.ConditionType#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val type: ConditionType? = null,
  ifActions: List<Action> = emptyList(),
  elseActions: List<Action> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : AndroidMessage<ConditionAction, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 2,
    adapter = "com.yunlong.particle.proto.Action#ADAPTER",
    label = WireField.Label.REPEATED,
  )
  public val ifActions: List<Action> = immutableCopyOf("ifActions", ifActions)

  @field:WireField(
    tag = 3,
    adapter = "com.yunlong.particle.proto.Action#ADAPTER",
    label = WireField.Label.REPEATED,
  )
  public val elseActions: List<Action> = immutableCopyOf("elseActions", elseActions)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ConditionAction) return false
    if (unknownFields != other.unknownFields) return false
    if (type != other.type) return false
    if (ifActions != other.ifActions) return false
    if (elseActions != other.elseActions) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (type?.hashCode() ?: 0)
      result = result * 37 + ifActions.hashCode()
      result = result * 37 + elseActions.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (type != null) result += """type=$type"""
    if (ifActions.isNotEmpty()) result += """ifActions=$ifActions"""
    if (elseActions.isNotEmpty()) result += """elseActions=$elseActions"""
    return result.joinToString(prefix = "ConditionAction{", separator = ", ", postfix = "}")
  }

  public fun copy(
    type: ConditionType? = this.type,
    ifActions: List<Action> = this.ifActions,
    elseActions: List<Action> = this.elseActions,
    unknownFields: ByteString = this.unknownFields,
  ): ConditionAction = ConditionAction(type, ifActions, elseActions, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ConditionAction> = object : ProtoAdapter<ConditionAction>(
      FieldEncoding.LENGTH_DELIMITED, 
      ConditionAction::class, 
      "type.googleapis.com/com.yunlong.particle.proto.ConditionAction", 
      PROTO_3, 
      null, 
      "generate/particle.proto"
    ) {
      public override fun encodedSize(`value`: ConditionAction): Int {
        var size = value.unknownFields.size
        if (value.type != null) size += ConditionType.ADAPTER.encodedSizeWithTag(1, value.type)
        size += Action.ADAPTER.asRepeated().encodedSizeWithTag(2, value.ifActions)
        size += Action.ADAPTER.asRepeated().encodedSizeWithTag(3, value.elseActions)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: ConditionAction): Unit {
        if (value.type != null) ConditionType.ADAPTER.encodeWithTag(writer, 1, value.type)
        Action.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.ifActions)
        Action.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.elseActions)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: ConditionAction): Unit {
        writer.writeBytes(value.unknownFields)
        Action.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.elseActions)
        Action.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.ifActions)
        if (value.type != null) ConditionType.ADAPTER.encodeWithTag(writer, 1, value.type)
      }

      public override fun decode(reader: ProtoReader): ConditionAction {
        var type: ConditionType? = null
        val ifActions = mutableListOf<Action>()
        val elseActions = mutableListOf<Action>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> type = ConditionType.ADAPTER.decode(reader)
            2 -> ifActions.add(Action.ADAPTER.decode(reader))
            3 -> elseActions.add(Action.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return ConditionAction(
          type = type,
          ifActions = ifActions,
          elseActions = elseActions,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: ConditionAction): ConditionAction = value.copy(
        type = value.type?.let(ConditionType.ADAPTER::redact),
        ifActions = value.ifActions.redactElements(Action.ADAPTER),
        elseActions = value.elseActions.redactElements(Action.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<ConditionAction> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
