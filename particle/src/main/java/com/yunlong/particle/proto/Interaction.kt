// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.yunlong.particle.proto.Interaction in generate/particle.proto
package com.yunlong.particle.proto

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * An interaction refers to any user-triggered event that occurs in a software application, such as
 * clicking a button,
 * scrolling a page, or typing into a text field. Interactions can be used to initiate actions or
 * events within
 * an application.
 */
public class Interaction(
  event: List<Event> = emptyList(),
  action: List<Action> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : AndroidMessage<Interaction, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "com.yunlong.particle.proto.Event#ADAPTER",
    label = WireField.Label.REPEATED,
  )
  public val event: List<Event> = immutableCopyOf("event", event)

  @field:WireField(
    tag = 2,
    adapter = "com.yunlong.particle.proto.Action#ADAPTER",
    label = WireField.Label.REPEATED,
  )
  public val action: List<Action> = immutableCopyOf("action", action)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is Interaction) return false
    if (unknownFields != other.unknownFields) return false
    if (event != other.event) return false
    if (action != other.action) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + event.hashCode()
      result = result * 37 + action.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (event.isNotEmpty()) result += """event=$event"""
    if (action.isNotEmpty()) result += """action=$action"""
    return result.joinToString(prefix = "Interaction{", separator = ", ", postfix = "}")
  }

  public fun copy(
    event: List<Event> = this.event,
    action: List<Action> = this.action,
    unknownFields: ByteString = this.unknownFields,
  ): Interaction = Interaction(event, action, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<Interaction> = object : ProtoAdapter<Interaction>(
      FieldEncoding.LENGTH_DELIMITED, 
      Interaction::class, 
      "type.googleapis.com/com.yunlong.particle.proto.Interaction", 
      PROTO_3, 
      null, 
      "generate/particle.proto"
    ) {
      public override fun encodedSize(`value`: Interaction): Int {
        var size = value.unknownFields.size
        size += Event.ADAPTER.asRepeated().encodedSizeWithTag(1, value.event)
        size += Action.ADAPTER.asRepeated().encodedSizeWithTag(2, value.action)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: Interaction): Unit {
        Event.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.event)
        Action.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.action)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: Interaction): Unit {
        writer.writeBytes(value.unknownFields)
        Action.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.action)
        Event.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.event)
      }

      public override fun decode(reader: ProtoReader): Interaction {
        val event = mutableListOf<Event>()
        val action = mutableListOf<Action>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              event.add(Event.ADAPTER.decode(reader))
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            2 -> action.add(Action.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return Interaction(
          event = event,
          action = action,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: Interaction): Interaction = value.copy(
        action = value.action.redactElements(Action.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<Interaction> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
