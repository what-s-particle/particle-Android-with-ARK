// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.yunlong.particle.proto.ActionSheetComponent in generate/particle.proto
package com.yunlong.particle.proto

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * ActionSheet Element used to create an action sheet.
 * In Jetpack Compose, we can use the combination of `DropdownMenu` and `Text` to implement an
 * ActionSheet
 * that pops up from the bottom.
 */
public class ActionSheetComponent(
  /**
   * Title of the action sheet.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.yunlong.particle.proto.Particle#ADAPTER",
  )
  public val title: Particle? = null,
  /**
   * Message to display in the action sheet.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.yunlong.particle.proto.Particle#ADAPTER",
  )
  public val message: Particle? = null,
  buttons: List<Particle> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY,
) : AndroidMessage<ActionSheetComponent, Nothing>(ADAPTER, unknownFields) {
  /**
   * Buttons to display in the action sheet.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.yunlong.particle.proto.Particle#ADAPTER",
    label = WireField.Label.REPEATED,
  )
  public val buttons: List<Particle> = immutableCopyOf("buttons", buttons)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ActionSheetComponent) return false
    if (unknownFields != other.unknownFields) return false
    if (title != other.title) return false
    if (message != other.message) return false
    if (buttons != other.buttons) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (title?.hashCode() ?: 0)
      result = result * 37 + (message?.hashCode() ?: 0)
      result = result * 37 + buttons.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (title != null) result += """title=$title"""
    if (message != null) result += """message=$message"""
    if (buttons.isNotEmpty()) result += """buttons=$buttons"""
    return result.joinToString(prefix = "ActionSheetComponent{", separator = ", ", postfix = "}")
  }

  public fun copy(
    title: Particle? = this.title,
    message: Particle? = this.message,
    buttons: List<Particle> = this.buttons,
    unknownFields: ByteString = this.unknownFields,
  ): ActionSheetComponent = ActionSheetComponent(title, message, buttons, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ActionSheetComponent> = object :
        ProtoAdapter<ActionSheetComponent>(
      FieldEncoding.LENGTH_DELIMITED, 
      ActionSheetComponent::class, 
      "type.googleapis.com/com.yunlong.particle.proto.ActionSheetComponent", 
      PROTO_3, 
      null, 
      "generate/particle.proto"
    ) {
      public override fun encodedSize(`value`: ActionSheetComponent): Int {
        var size = value.unknownFields.size
        size += Particle.ADAPTER.encodedSizeWithTag(1, value.title)
        size += Particle.ADAPTER.encodedSizeWithTag(2, value.message)
        size += Particle.ADAPTER.asRepeated().encodedSizeWithTag(3, value.buttons)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: ActionSheetComponent): Unit {
        Particle.ADAPTER.encodeWithTag(writer, 1, value.title)
        Particle.ADAPTER.encodeWithTag(writer, 2, value.message)
        Particle.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.buttons)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: ActionSheetComponent): Unit {
        writer.writeBytes(value.unknownFields)
        Particle.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.buttons)
        Particle.ADAPTER.encodeWithTag(writer, 2, value.message)
        Particle.ADAPTER.encodeWithTag(writer, 1, value.title)
      }

      public override fun decode(reader: ProtoReader): ActionSheetComponent {
        var title: Particle? = null
        var message: Particle? = null
        val buttons = mutableListOf<Particle>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> title = Particle.ADAPTER.decode(reader)
            2 -> message = Particle.ADAPTER.decode(reader)
            3 -> buttons.add(Particle.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return ActionSheetComponent(
          title = title,
          message = message,
          buttons = buttons,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: ActionSheetComponent): ActionSheetComponent = value.copy(
        title = value.title?.let(Particle.ADAPTER::redact),
        message = value.message?.let(Particle.ADAPTER::redact),
        buttons = value.buttons.redactElements(Particle.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<ActionSheetComponent> =
        AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
