// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.yunlong.particle.proto.ColorModifier in generate/particle.proto
package com.yunlong.particle.proto

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.countNonNull
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

public class ColorModifier(
  @field:WireField(
    tag = 1,
    adapter = "com.yunlong.particle.proto.ColorToken#ADAPTER",
    oneofName = "color",
  )
  public val token: ColorToken? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    declaredName = "value",
    oneofName = "color",
  )
  public val value_: Int? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : AndroidMessage<ColorModifier, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(token, value_) <= 1) {
      "At most one of token, value_ may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ColorModifier) return false
    if (unknownFields != other.unknownFields) return false
    if (token != other.token) return false
    if (value_ != other.value_) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (token?.hashCode() ?: 0)
      result = result * 37 + (value_?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (token != null) result += """token=$token"""
    if (value_ != null) result += """value_=$value_"""
    return result.joinToString(prefix = "ColorModifier{", separator = ", ", postfix = "}")
  }

  public fun copy(
    token: ColorToken? = this.token,
    value_: Int? = this.value_,
    unknownFields: ByteString = this.unknownFields,
  ): ColorModifier = ColorModifier(token, value_, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ColorModifier> = object : ProtoAdapter<ColorModifier>(
      FieldEncoding.LENGTH_DELIMITED, 
      ColorModifier::class, 
      "type.googleapis.com/com.yunlong.particle.proto.ColorModifier", 
      PROTO_3, 
      null, 
      "generate/particle.proto"
    ) {
      public override fun encodedSize(`value`: ColorModifier): Int {
        var size = value.unknownFields.size
        size += ColorToken.ADAPTER.encodedSizeWithTag(1, value.token)
        size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.value_)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: ColorModifier): Unit {
        ColorToken.ADAPTER.encodeWithTag(writer, 1, value.token)
        ProtoAdapter.INT32.encodeWithTag(writer, 2, value.value_)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: ColorModifier): Unit {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.INT32.encodeWithTag(writer, 2, value.value_)
        ColorToken.ADAPTER.encodeWithTag(writer, 1, value.token)
      }

      public override fun decode(reader: ProtoReader): ColorModifier {
        var token: ColorToken? = null
        var value_: Int? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> try {
              token = ColorToken.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            2 -> value_ = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ColorModifier(
          token = token,
          value_ = value_,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: ColorModifier): ColorModifier = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<ColorModifier> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
