// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.yunlong.particle.proto.ImageComponent in generate/particle.proto
package com.yunlong.particle.proto

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * Image Element used to display an image
 */
public class ImageComponent(
  /**
   * The URL of the image.
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val url: String = "",
  /**
   * The localized description of the image.
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val description: String = "",
  /**
   * Whether to display the image as a circular shape.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val circular: Boolean = false,
  /**
   * Whether to load the local resource
   */
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val local: Boolean = false,
  /**
   * The content mode of the image.
   */
  @field:WireField(
    tag = 6,
    adapter = "com.yunlong.particle.proto.ContentMode#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "contentMode",
  )
  public val content_mode: ContentMode = ContentMode.SCALE_TO_FIT,
  unknownFields: ByteString = ByteString.EMPTY,
) : AndroidMessage<ImageComponent, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ImageComponent) return false
    if (unknownFields != other.unknownFields) return false
    if (url != other.url) return false
    if (description != other.description) return false
    if (circular != other.circular) return false
    if (local != other.local) return false
    if (content_mode != other.content_mode) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + url.hashCode()
      result = result * 37 + description.hashCode()
      result = result * 37 + circular.hashCode()
      result = result * 37 + local.hashCode()
      result = result * 37 + content_mode.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """url=${sanitize(url)}"""
    result += """description=${sanitize(description)}"""
    result += """circular=$circular"""
    result += """local=$local"""
    result += """content_mode=$content_mode"""
    return result.joinToString(prefix = "ImageComponent{", separator = ", ", postfix = "}")
  }

  public fun copy(
    url: String = this.url,
    description: String = this.description,
    circular: Boolean = this.circular,
    local: Boolean = this.local,
    content_mode: ContentMode = this.content_mode,
    unknownFields: ByteString = this.unknownFields,
  ): ImageComponent = ImageComponent(url, description, circular, local, content_mode, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ImageComponent> = object : ProtoAdapter<ImageComponent>(
      FieldEncoding.LENGTH_DELIMITED, 
      ImageComponent::class, 
      "type.googleapis.com/com.yunlong.particle.proto.ImageComponent", 
      PROTO_3, 
      null, 
      "generate/particle.proto"
    ) {
      public override fun encodedSize(`value`: ImageComponent): Int {
        var size = value.unknownFields.size
        if (value.url != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.url)
        if (value.description != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2,
            value.description)
        if (value.circular != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(4, value.circular)
        if (value.local != false) size += ProtoAdapter.BOOL.encodedSizeWithTag(5, value.local)
        if (value.content_mode != ContentMode.SCALE_TO_FIT) size +=
            ContentMode.ADAPTER.encodedSizeWithTag(6, value.content_mode)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: ImageComponent): Unit {
        if (value.url != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.url)
        if (value.description != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.description)
        if (value.circular != false) ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.circular)
        if (value.local != false) ProtoAdapter.BOOL.encodeWithTag(writer, 5, value.local)
        if (value.content_mode != ContentMode.SCALE_TO_FIT)
            ContentMode.ADAPTER.encodeWithTag(writer, 6, value.content_mode)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: ImageComponent): Unit {
        writer.writeBytes(value.unknownFields)
        if (value.content_mode != ContentMode.SCALE_TO_FIT)
            ContentMode.ADAPTER.encodeWithTag(writer, 6, value.content_mode)
        if (value.local != false) ProtoAdapter.BOOL.encodeWithTag(writer, 5, value.local)
        if (value.circular != false) ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.circular)
        if (value.description != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.description)
        if (value.url != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.url)
      }

      public override fun decode(reader: ProtoReader): ImageComponent {
        var url: String = ""
        var description: String = ""
        var circular: Boolean = false
        var local: Boolean = false
        var content_mode: ContentMode = ContentMode.SCALE_TO_FIT
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> url = ProtoAdapter.STRING.decode(reader)
            2 -> description = ProtoAdapter.STRING.decode(reader)
            4 -> circular = ProtoAdapter.BOOL.decode(reader)
            5 -> local = ProtoAdapter.BOOL.decode(reader)
            6 -> try {
              content_mode = ContentMode.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            else -> reader.readUnknownField(tag)
          }
        }
        return ImageComponent(
          url = url,
          description = description,
          circular = circular,
          local = local,
          content_mode = content_mode,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: ImageComponent): ImageComponent = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<ImageComponent> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
