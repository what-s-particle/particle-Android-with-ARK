// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.yunlong.particle.proto.TopBarComponent in generate/particle.proto
package com.yunlong.particle.proto

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * TopBar view layout component.
 */
public class TopBarComponent(
  @field:WireField(
    tag = 1,
    adapter = "com.yunlong.particle.proto.Particle#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val title: Particle? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.yunlong.particle.proto.Particle#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val navigationIcon: Particle? = null,
  actions: List<Particle> = emptyList(),
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val elevation: Int = 0,
  @field:WireField(
    tag = 5,
    adapter = "com.yunlong.particle.proto.ColorModifier#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val backgroundColor: ColorModifier? = null,
  @field:WireField(
    tag = 6,
    adapter = "com.yunlong.particle.proto.ColorModifier#ADAPTER",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val contentColor: ColorModifier? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : AndroidMessage<TopBarComponent, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 3,
    adapter = "com.yunlong.particle.proto.Particle#ADAPTER",
    label = WireField.Label.REPEATED,
  )
  public val actions: List<Particle> = immutableCopyOf("actions", actions)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is TopBarComponent) return false
    if (unknownFields != other.unknownFields) return false
    if (title != other.title) return false
    if (navigationIcon != other.navigationIcon) return false
    if (actions != other.actions) return false
    if (elevation != other.elevation) return false
    if (backgroundColor != other.backgroundColor) return false
    if (contentColor != other.contentColor) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (title?.hashCode() ?: 0)
      result = result * 37 + (navigationIcon?.hashCode() ?: 0)
      result = result * 37 + actions.hashCode()
      result = result * 37 + elevation.hashCode()
      result = result * 37 + (backgroundColor?.hashCode() ?: 0)
      result = result * 37 + (contentColor?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (title != null) result += """title=$title"""
    if (navigationIcon != null) result += """navigationIcon=$navigationIcon"""
    if (actions.isNotEmpty()) result += """actions=$actions"""
    result += """elevation=$elevation"""
    if (backgroundColor != null) result += """backgroundColor=$backgroundColor"""
    if (contentColor != null) result += """contentColor=$contentColor"""
    return result.joinToString(prefix = "TopBarComponent{", separator = ", ", postfix = "}")
  }

  public fun copy(
    title: Particle? = this.title,
    navigationIcon: Particle? = this.navigationIcon,
    actions: List<Particle> = this.actions,
    elevation: Int = this.elevation,
    backgroundColor: ColorModifier? = this.backgroundColor,
    contentColor: ColorModifier? = this.contentColor,
    unknownFields: ByteString = this.unknownFields,
  ): TopBarComponent = TopBarComponent(title, navigationIcon, actions, elevation, backgroundColor,
      contentColor, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<TopBarComponent> = object : ProtoAdapter<TopBarComponent>(
      FieldEncoding.LENGTH_DELIMITED, 
      TopBarComponent::class, 
      "type.googleapis.com/com.yunlong.particle.proto.TopBarComponent", 
      PROTO_3, 
      null, 
      "generate/particle.proto"
    ) {
      public override fun encodedSize(`value`: TopBarComponent): Int {
        var size = value.unknownFields.size
        if (value.title != null) size += Particle.ADAPTER.encodedSizeWithTag(1, value.title)
        if (value.navigationIcon != null) size += Particle.ADAPTER.encodedSizeWithTag(2,
            value.navigationIcon)
        size += Particle.ADAPTER.asRepeated().encodedSizeWithTag(3, value.actions)
        if (value.elevation != 0) size += ProtoAdapter.INT32.encodedSizeWithTag(4, value.elevation)
        if (value.backgroundColor != null) size += ColorModifier.ADAPTER.encodedSizeWithTag(5,
            value.backgroundColor)
        if (value.contentColor != null) size += ColorModifier.ADAPTER.encodedSizeWithTag(6,
            value.contentColor)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: TopBarComponent): Unit {
        if (value.title != null) Particle.ADAPTER.encodeWithTag(writer, 1, value.title)
        if (value.navigationIcon != null) Particle.ADAPTER.encodeWithTag(writer, 2,
            value.navigationIcon)
        Particle.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.actions)
        if (value.elevation != 0) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.elevation)
        if (value.backgroundColor != null) ColorModifier.ADAPTER.encodeWithTag(writer, 5,
            value.backgroundColor)
        if (value.contentColor != null) ColorModifier.ADAPTER.encodeWithTag(writer, 6,
            value.contentColor)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: TopBarComponent): Unit {
        writer.writeBytes(value.unknownFields)
        if (value.contentColor != null) ColorModifier.ADAPTER.encodeWithTag(writer, 6,
            value.contentColor)
        if (value.backgroundColor != null) ColorModifier.ADAPTER.encodeWithTag(writer, 5,
            value.backgroundColor)
        if (value.elevation != 0) ProtoAdapter.INT32.encodeWithTag(writer, 4, value.elevation)
        Particle.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.actions)
        if (value.navigationIcon != null) Particle.ADAPTER.encodeWithTag(writer, 2,
            value.navigationIcon)
        if (value.title != null) Particle.ADAPTER.encodeWithTag(writer, 1, value.title)
      }

      public override fun decode(reader: ProtoReader): TopBarComponent {
        var title: Particle? = null
        var navigationIcon: Particle? = null
        val actions = mutableListOf<Particle>()
        var elevation: Int = 0
        var backgroundColor: ColorModifier? = null
        var contentColor: ColorModifier? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> title = Particle.ADAPTER.decode(reader)
            2 -> navigationIcon = Particle.ADAPTER.decode(reader)
            3 -> actions.add(Particle.ADAPTER.decode(reader))
            4 -> elevation = ProtoAdapter.INT32.decode(reader)
            5 -> backgroundColor = ColorModifier.ADAPTER.decode(reader)
            6 -> contentColor = ColorModifier.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return TopBarComponent(
          title = title,
          navigationIcon = navigationIcon,
          actions = actions,
          elevation = elevation,
          backgroundColor = backgroundColor,
          contentColor = contentColor,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: TopBarComponent): TopBarComponent = value.copy(
        title = value.title?.let(Particle.ADAPTER::redact),
        navigationIcon = value.navigationIcon?.let(Particle.ADAPTER::redact),
        actions = value.actions.redactElements(Particle.ADAPTER),
        backgroundColor = value.backgroundColor?.let(ColorModifier.ADAPTER::redact),
        contentColor = value.contentColor?.let(ColorModifier.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<TopBarComponent> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
