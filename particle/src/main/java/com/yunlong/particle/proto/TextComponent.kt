// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.yunlong.particle.proto.TextComponent in generate/particle.proto
package com.yunlong.particle.proto

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * Text Element used to display text
 */
public class TextComponent(
  /**
   * The text content to be displayed
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
  )
  public val content: String = "",
  /**
   * The name of the font family, such as "Arial".
   */
  @field:WireField(
    tag = 2,
    adapter = "com.yunlong.particle.proto.FontFamily#ADAPTER",
  )
  public val fontFamily: FontFamily? = null,
  /**
   * The size of the font, in points.
   */
  @field:WireField(
    tag = 3,
    adapter = "com.yunlong.particle.proto.SizeModifier#ADAPTER",
  )
  public val fontSize: SizeModifier? = null,
  /**
   * Whether the text is bold or not.
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
  )
  public val bold: Boolean? = null,
  /**
   * Whether the text is italic or not.
   */
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
  )
  public val italic: Boolean? = null,
  /**
   * Whether the text is underlined or not.
   */
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
  )
  public val underline: Boolean? = null,
  /**
   * Whether the text has a strikethrough line or not.
   */
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
  )
  public val strikethrough: Boolean? = null,
  /**
   * The color of the text, specified as a hex code or name.
   */
  @field:WireField(
    tag = 8,
    adapter = "com.yunlong.particle.proto.ColorModifier#ADAPTER",
  )
  public val color: ColorModifier? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : AndroidMessage<TextComponent, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is TextComponent) return false
    if (unknownFields != other.unknownFields) return false
    if (content != other.content) return false
    if (fontFamily != other.fontFamily) return false
    if (fontSize != other.fontSize) return false
    if (bold != other.bold) return false
    if (italic != other.italic) return false
    if (underline != other.underline) return false
    if (strikethrough != other.strikethrough) return false
    if (color != other.color) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + content.hashCode()
      result = result * 37 + (fontFamily?.hashCode() ?: 0)
      result = result * 37 + (fontSize?.hashCode() ?: 0)
      result = result * 37 + (bold?.hashCode() ?: 0)
      result = result * 37 + (italic?.hashCode() ?: 0)
      result = result * 37 + (underline?.hashCode() ?: 0)
      result = result * 37 + (strikethrough?.hashCode() ?: 0)
      result = result * 37 + (color?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """content=${sanitize(content)}"""
    if (fontFamily != null) result += """fontFamily=$fontFamily"""
    if (fontSize != null) result += """fontSize=$fontSize"""
    if (bold != null) result += """bold=$bold"""
    if (italic != null) result += """italic=$italic"""
    if (underline != null) result += """underline=$underline"""
    if (strikethrough != null) result += """strikethrough=$strikethrough"""
    if (color != null) result += """color=$color"""
    return result.joinToString(prefix = "TextComponent{", separator = ", ", postfix = "}")
  }

  public fun copy(
    content: String = this.content,
    fontFamily: FontFamily? = this.fontFamily,
    fontSize: SizeModifier? = this.fontSize,
    bold: Boolean? = this.bold,
    italic: Boolean? = this.italic,
    underline: Boolean? = this.underline,
    strikethrough: Boolean? = this.strikethrough,
    color: ColorModifier? = this.color,
    unknownFields: ByteString = this.unknownFields,
  ): TextComponent = TextComponent(content, fontFamily, fontSize, bold, italic, underline,
      strikethrough, color, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<TextComponent> = object : ProtoAdapter<TextComponent>(
      FieldEncoding.LENGTH_DELIMITED, 
      TextComponent::class, 
      "type.googleapis.com/com.yunlong.particle.proto.TextComponent", 
      PROTO_3, 
      null, 
      "generate/particle.proto"
    ) {
      public override fun encodedSize(`value`: TextComponent): Int {
        var size = value.unknownFields.size
        if (value.content != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.content)
        size += FontFamily.ADAPTER.encodedSizeWithTag(2, value.fontFamily)
        size += SizeModifier.ADAPTER.encodedSizeWithTag(3, value.fontSize)
        size += ProtoAdapter.BOOL.encodedSizeWithTag(4, value.bold)
        size += ProtoAdapter.BOOL.encodedSizeWithTag(5, value.italic)
        size += ProtoAdapter.BOOL.encodedSizeWithTag(6, value.underline)
        size += ProtoAdapter.BOOL.encodedSizeWithTag(7, value.strikethrough)
        size += ColorModifier.ADAPTER.encodedSizeWithTag(8, value.color)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: TextComponent): Unit {
        if (value.content != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.content)
        FontFamily.ADAPTER.encodeWithTag(writer, 2, value.fontFamily)
        SizeModifier.ADAPTER.encodeWithTag(writer, 3, value.fontSize)
        ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.bold)
        ProtoAdapter.BOOL.encodeWithTag(writer, 5, value.italic)
        ProtoAdapter.BOOL.encodeWithTag(writer, 6, value.underline)
        ProtoAdapter.BOOL.encodeWithTag(writer, 7, value.strikethrough)
        ColorModifier.ADAPTER.encodeWithTag(writer, 8, value.color)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: TextComponent): Unit {
        writer.writeBytes(value.unknownFields)
        ColorModifier.ADAPTER.encodeWithTag(writer, 8, value.color)
        ProtoAdapter.BOOL.encodeWithTag(writer, 7, value.strikethrough)
        ProtoAdapter.BOOL.encodeWithTag(writer, 6, value.underline)
        ProtoAdapter.BOOL.encodeWithTag(writer, 5, value.italic)
        ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.bold)
        SizeModifier.ADAPTER.encodeWithTag(writer, 3, value.fontSize)
        FontFamily.ADAPTER.encodeWithTag(writer, 2, value.fontFamily)
        if (value.content != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.content)
      }

      public override fun decode(reader: ProtoReader): TextComponent {
        var content: String = ""
        var fontFamily: FontFamily? = null
        var fontSize: SizeModifier? = null
        var bold: Boolean? = null
        var italic: Boolean? = null
        var underline: Boolean? = null
        var strikethrough: Boolean? = null
        var color: ColorModifier? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> content = ProtoAdapter.STRING.decode(reader)
            2 -> try {
              fontFamily = FontFamily.ADAPTER.decode(reader)
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            3 -> fontSize = SizeModifier.ADAPTER.decode(reader)
            4 -> bold = ProtoAdapter.BOOL.decode(reader)
            5 -> italic = ProtoAdapter.BOOL.decode(reader)
            6 -> underline = ProtoAdapter.BOOL.decode(reader)
            7 -> strikethrough = ProtoAdapter.BOOL.decode(reader)
            8 -> color = ColorModifier.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return TextComponent(
          content = content,
          fontFamily = fontFamily,
          fontSize = fontSize,
          bold = bold,
          italic = italic,
          underline = underline,
          strikethrough = strikethrough,
          color = color,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: TextComponent): TextComponent = value.copy(
        fontSize = value.fontSize?.let(SizeModifier.ADAPTER::redact),
        color = value.color?.let(ColorModifier.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<TextComponent> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
