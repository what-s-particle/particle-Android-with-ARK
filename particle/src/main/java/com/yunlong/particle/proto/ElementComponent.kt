// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.yunlong.particle.proto.ElementComponent in generate/particle.proto
package com.yunlong.particle.proto

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.countNonNull
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

public class ElementComponent(
  /**
   * Used to create a clickable button
   */
  @field:WireField(
    tag = 1,
    adapter = "com.yunlong.particle.proto.ButtonComponent#ADAPTER",
    oneofName = "element",
  )
  public val button: ButtonComponent? = null,
  /**
   * Used to display text
   */
  @field:WireField(
    tag = 2,
    adapter = "com.yunlong.particle.proto.TextComponent#ADAPTER",
    oneofName = "element",
  )
  public val label: TextComponent? = null,
  /**
   * Used to display an image
   */
  @field:WireField(
    tag = 3,
    adapter = "com.yunlong.particle.proto.ImageComponent#ADAPTER",
    oneofName = "element",
  )
  public val image: ImageComponent? = null,
  /**
   * Used to create a text input field
   */
  @field:WireField(
    tag = 4,
    adapter = "com.yunlong.particle.proto.TextFieldComponent#ADAPTER",
    jsonName = "textField",
    oneofName = "element",
  )
  public val text_field: TextFieldComponent? = null,
  /**
   * Used to create a multiline text input field
   */
  @field:WireField(
    tag = 5,
    adapter = "com.yunlong.particle.proto.TextEditorComponent#ADAPTER",
    jsonName = "textEditor",
    oneofName = "element",
  )
  public val text_editor: TextEditorComponent? = null,
  /**
   * Used to create a slider
   */
  @field:WireField(
    tag = 6,
    adapter = "com.yunlong.particle.proto.SliderComponent#ADAPTER",
    oneofName = "element",
  )
  public val slider: SliderComponent? = null,
  /**
   * Used to create a switch toggle
   */
  @field:WireField(
    tag = 7,
    adapter = "com.yunlong.particle.proto.ToggleComponent#ADAPTER",
    oneofName = "element",
  )
  public val toggle: ToggleComponent? = null,
  /**
   * Used to create a checkbox
   */
  @field:WireField(
    tag = 8,
    adapter = "com.yunlong.particle.proto.CheckBoxComponent#ADAPTER",
    oneofName = "element",
  )
  public val checkbox: CheckBoxComponent? = null,
  /**
   * Used to create a radio button
   */
  @field:WireField(
    tag = 9,
    adapter = "com.yunlong.particle.proto.RadioButtonComponent#ADAPTER",
    jsonName = "radioButton",
    oneofName = "element",
  )
  public val radio_button: RadioButtonComponent? = null,
  /**
   * Used to create a dropdown list
   */
  @field:WireField(
    tag = 10,
    adapter = "com.yunlong.particle.proto.PickerComponent#ADAPTER",
    oneofName = "element",
  )
  public val picker: PickerComponent? = null,
  /**
   * Used to create a toolbar
   */
  @field:WireField(
    tag = 11,
    adapter = "com.yunlong.particle.proto.TopAppBarComponent#ADAPTER",
    jsonName = "topAppBar",
    oneofName = "element",
  )
  public val top_app_bar: TopAppBarComponent? = null,
  /**
   * Used to create a navigation bar
   */
  @field:WireField(
    tag = 12,
    adapter = "com.yunlong.particle.proto.NavigationBarItemComponent#ADAPTER",
    jsonName = "navigationViewItem",
    oneofName = "element",
  )
  public val navigation_view_item: NavigationBarItemComponent? = null,
  /**
   * Used to create an alert dialog
   */
  @field:WireField(
    tag = 13,
    adapter = "com.yunlong.particle.proto.AlertComponent#ADAPTER",
    oneofName = "element",
  )
  public val alert: AlertComponent? = null,
  /**
   * Used to create an action sheet
   */
  @field:WireField(
    tag = 14,
    adapter = "com.yunlong.particle.proto.ActionSheetComponent#ADAPTER",
    jsonName = "actionSheet",
    oneofName = "element",
  )
  public val action_sheet: ActionSheetComponent? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : AndroidMessage<ElementComponent, Nothing>(ADAPTER, unknownFields) {
  init {
    require(countNonNull(button, label, image, text_field, text_editor, slider, toggle, checkbox,
        radio_button, picker, top_app_bar, navigation_view_item, alert, action_sheet) <= 1) {
      "At most one of button, label, image, text_field, text_editor, slider, toggle, checkbox, radio_button, picker, top_app_bar, navigation_view_item, alert, action_sheet may be non-null"
    }
  }

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ElementComponent) return false
    if (unknownFields != other.unknownFields) return false
    if (button != other.button) return false
    if (label != other.label) return false
    if (image != other.image) return false
    if (text_field != other.text_field) return false
    if (text_editor != other.text_editor) return false
    if (slider != other.slider) return false
    if (toggle != other.toggle) return false
    if (checkbox != other.checkbox) return false
    if (radio_button != other.radio_button) return false
    if (picker != other.picker) return false
    if (top_app_bar != other.top_app_bar) return false
    if (navigation_view_item != other.navigation_view_item) return false
    if (alert != other.alert) return false
    if (action_sheet != other.action_sheet) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (button?.hashCode() ?: 0)
      result = result * 37 + (label?.hashCode() ?: 0)
      result = result * 37 + (image?.hashCode() ?: 0)
      result = result * 37 + (text_field?.hashCode() ?: 0)
      result = result * 37 + (text_editor?.hashCode() ?: 0)
      result = result * 37 + (slider?.hashCode() ?: 0)
      result = result * 37 + (toggle?.hashCode() ?: 0)
      result = result * 37 + (checkbox?.hashCode() ?: 0)
      result = result * 37 + (radio_button?.hashCode() ?: 0)
      result = result * 37 + (picker?.hashCode() ?: 0)
      result = result * 37 + (top_app_bar?.hashCode() ?: 0)
      result = result * 37 + (navigation_view_item?.hashCode() ?: 0)
      result = result * 37 + (alert?.hashCode() ?: 0)
      result = result * 37 + (action_sheet?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    if (button != null) result += """button=$button"""
    if (label != null) result += """label=$label"""
    if (image != null) result += """image=$image"""
    if (text_field != null) result += """text_field=$text_field"""
    if (text_editor != null) result += """text_editor=$text_editor"""
    if (slider != null) result += """slider=$slider"""
    if (toggle != null) result += """toggle=$toggle"""
    if (checkbox != null) result += """checkbox=$checkbox"""
    if (radio_button != null) result += """radio_button=$radio_button"""
    if (picker != null) result += """picker=$picker"""
    if (top_app_bar != null) result += """top_app_bar=$top_app_bar"""
    if (navigation_view_item != null) result += """navigation_view_item=$navigation_view_item"""
    if (alert != null) result += """alert=$alert"""
    if (action_sheet != null) result += """action_sheet=$action_sheet"""
    return result.joinToString(prefix = "ElementComponent{", separator = ", ", postfix = "}")
  }

  public fun copy(
    button: ButtonComponent? = this.button,
    label: TextComponent? = this.label,
    image: ImageComponent? = this.image,
    text_field: TextFieldComponent? = this.text_field,
    text_editor: TextEditorComponent? = this.text_editor,
    slider: SliderComponent? = this.slider,
    toggle: ToggleComponent? = this.toggle,
    checkbox: CheckBoxComponent? = this.checkbox,
    radio_button: RadioButtonComponent? = this.radio_button,
    picker: PickerComponent? = this.picker,
    top_app_bar: TopAppBarComponent? = this.top_app_bar,
    navigation_view_item: NavigationBarItemComponent? = this.navigation_view_item,
    alert: AlertComponent? = this.alert,
    action_sheet: ActionSheetComponent? = this.action_sheet,
    unknownFields: ByteString = this.unknownFields,
  ): ElementComponent = ElementComponent(button, label, image, text_field, text_editor, slider,
      toggle, checkbox, radio_button, picker, top_app_bar, navigation_view_item, alert,
      action_sheet, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<ElementComponent> = object : ProtoAdapter<ElementComponent>(
      FieldEncoding.LENGTH_DELIMITED, 
      ElementComponent::class, 
      "type.googleapis.com/com.yunlong.particle.proto.ElementComponent", 
      PROTO_3, 
      null, 
      "generate/particle.proto"
    ) {
      public override fun encodedSize(`value`: ElementComponent): Int {
        var size = value.unknownFields.size
        size += ButtonComponent.ADAPTER.encodedSizeWithTag(1, value.button)
        size += TextComponent.ADAPTER.encodedSizeWithTag(2, value.label)
        size += ImageComponent.ADAPTER.encodedSizeWithTag(3, value.image)
        size += TextFieldComponent.ADAPTER.encodedSizeWithTag(4, value.text_field)
        size += TextEditorComponent.ADAPTER.encodedSizeWithTag(5, value.text_editor)
        size += SliderComponent.ADAPTER.encodedSizeWithTag(6, value.slider)
        size += ToggleComponent.ADAPTER.encodedSizeWithTag(7, value.toggle)
        size += CheckBoxComponent.ADAPTER.encodedSizeWithTag(8, value.checkbox)
        size += RadioButtonComponent.ADAPTER.encodedSizeWithTag(9, value.radio_button)
        size += PickerComponent.ADAPTER.encodedSizeWithTag(10, value.picker)
        size += TopAppBarComponent.ADAPTER.encodedSizeWithTag(11, value.top_app_bar)
        size += NavigationBarItemComponent.ADAPTER.encodedSizeWithTag(12,
            value.navigation_view_item)
        size += AlertComponent.ADAPTER.encodedSizeWithTag(13, value.alert)
        size += ActionSheetComponent.ADAPTER.encodedSizeWithTag(14, value.action_sheet)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: ElementComponent): Unit {
        ButtonComponent.ADAPTER.encodeWithTag(writer, 1, value.button)
        TextComponent.ADAPTER.encodeWithTag(writer, 2, value.label)
        ImageComponent.ADAPTER.encodeWithTag(writer, 3, value.image)
        TextFieldComponent.ADAPTER.encodeWithTag(writer, 4, value.text_field)
        TextEditorComponent.ADAPTER.encodeWithTag(writer, 5, value.text_editor)
        SliderComponent.ADAPTER.encodeWithTag(writer, 6, value.slider)
        ToggleComponent.ADAPTER.encodeWithTag(writer, 7, value.toggle)
        CheckBoxComponent.ADAPTER.encodeWithTag(writer, 8, value.checkbox)
        RadioButtonComponent.ADAPTER.encodeWithTag(writer, 9, value.radio_button)
        PickerComponent.ADAPTER.encodeWithTag(writer, 10, value.picker)
        TopAppBarComponent.ADAPTER.encodeWithTag(writer, 11, value.top_app_bar)
        NavigationBarItemComponent.ADAPTER.encodeWithTag(writer, 12, value.navigation_view_item)
        AlertComponent.ADAPTER.encodeWithTag(writer, 13, value.alert)
        ActionSheetComponent.ADAPTER.encodeWithTag(writer, 14, value.action_sheet)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: ElementComponent): Unit {
        writer.writeBytes(value.unknownFields)
        ActionSheetComponent.ADAPTER.encodeWithTag(writer, 14, value.action_sheet)
        AlertComponent.ADAPTER.encodeWithTag(writer, 13, value.alert)
        NavigationBarItemComponent.ADAPTER.encodeWithTag(writer, 12, value.navigation_view_item)
        TopAppBarComponent.ADAPTER.encodeWithTag(writer, 11, value.top_app_bar)
        PickerComponent.ADAPTER.encodeWithTag(writer, 10, value.picker)
        RadioButtonComponent.ADAPTER.encodeWithTag(writer, 9, value.radio_button)
        CheckBoxComponent.ADAPTER.encodeWithTag(writer, 8, value.checkbox)
        ToggleComponent.ADAPTER.encodeWithTag(writer, 7, value.toggle)
        SliderComponent.ADAPTER.encodeWithTag(writer, 6, value.slider)
        TextEditorComponent.ADAPTER.encodeWithTag(writer, 5, value.text_editor)
        TextFieldComponent.ADAPTER.encodeWithTag(writer, 4, value.text_field)
        ImageComponent.ADAPTER.encodeWithTag(writer, 3, value.image)
        TextComponent.ADAPTER.encodeWithTag(writer, 2, value.label)
        ButtonComponent.ADAPTER.encodeWithTag(writer, 1, value.button)
      }

      public override fun decode(reader: ProtoReader): ElementComponent {
        var button: ButtonComponent? = null
        var label: TextComponent? = null
        var image: ImageComponent? = null
        var text_field: TextFieldComponent? = null
        var text_editor: TextEditorComponent? = null
        var slider: SliderComponent? = null
        var toggle: ToggleComponent? = null
        var checkbox: CheckBoxComponent? = null
        var radio_button: RadioButtonComponent? = null
        var picker: PickerComponent? = null
        var top_app_bar: TopAppBarComponent? = null
        var navigation_view_item: NavigationBarItemComponent? = null
        var alert: AlertComponent? = null
        var action_sheet: ActionSheetComponent? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> button = ButtonComponent.ADAPTER.decode(reader)
            2 -> label = TextComponent.ADAPTER.decode(reader)
            3 -> image = ImageComponent.ADAPTER.decode(reader)
            4 -> text_field = TextFieldComponent.ADAPTER.decode(reader)
            5 -> text_editor = TextEditorComponent.ADAPTER.decode(reader)
            6 -> slider = SliderComponent.ADAPTER.decode(reader)
            7 -> toggle = ToggleComponent.ADAPTER.decode(reader)
            8 -> checkbox = CheckBoxComponent.ADAPTER.decode(reader)
            9 -> radio_button = RadioButtonComponent.ADAPTER.decode(reader)
            10 -> picker = PickerComponent.ADAPTER.decode(reader)
            11 -> top_app_bar = TopAppBarComponent.ADAPTER.decode(reader)
            12 -> navigation_view_item = NavigationBarItemComponent.ADAPTER.decode(reader)
            13 -> alert = AlertComponent.ADAPTER.decode(reader)
            14 -> action_sheet = ActionSheetComponent.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ElementComponent(
          button = button,
          label = label,
          image = image,
          text_field = text_field,
          text_editor = text_editor,
          slider = slider,
          toggle = toggle,
          checkbox = checkbox,
          radio_button = radio_button,
          picker = picker,
          top_app_bar = top_app_bar,
          navigation_view_item = navigation_view_item,
          alert = alert,
          action_sheet = action_sheet,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: ElementComponent): ElementComponent = value.copy(
        button = value.button?.let(ButtonComponent.ADAPTER::redact),
        label = value.label?.let(TextComponent.ADAPTER::redact),
        image = value.image?.let(ImageComponent.ADAPTER::redact),
        text_field = value.text_field?.let(TextFieldComponent.ADAPTER::redact),
        text_editor = value.text_editor?.let(TextEditorComponent.ADAPTER::redact),
        slider = value.slider?.let(SliderComponent.ADAPTER::redact),
        toggle = value.toggle?.let(ToggleComponent.ADAPTER::redact),
        checkbox = value.checkbox?.let(CheckBoxComponent.ADAPTER::redact),
        radio_button = value.radio_button?.let(RadioButtonComponent.ADAPTER::redact),
        picker = value.picker?.let(PickerComponent.ADAPTER::redact),
        top_app_bar = value.top_app_bar?.let(TopAppBarComponent.ADAPTER::redact),
        navigation_view_item =
            value.navigation_view_item?.let(NavigationBarItemComponent.ADAPTER::redact),
        alert = value.alert?.let(AlertComponent.ADAPTER::redact),
        action_sheet = value.action_sheet?.let(ActionSheetComponent.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<ElementComponent> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
